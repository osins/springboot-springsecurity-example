/*
 * This file is generated by jOOQ.
 */
package com.siyuo2o.glass.db.album.tables;


import com.siyuo2o.glass.db.album.Album;
import com.siyuo2o.glass.db.album.Indexes;
import com.siyuo2o.glass.db.album.Keys;
import com.siyuo2o.glass.db.album.enums.SysPermissionResourceType;
import com.siyuo2o.glass.db.album.tables.records.SysPermissionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SysPermission extends TableImpl<SysPermissionRecord> {

    private static final long serialVersionUID = 1536921093;

    /**
     * The reference instance of <code>album.sys_permission</code>
     */
    public static final SysPermission SYS_PERMISSION = new SysPermission();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SysPermissionRecord> getRecordType() {
        return SysPermissionRecord.class;
    }

    /**
     * The column <code>album.sys_permission.id</code>.
     */
    public final TableField<SysPermissionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>album.sys_permission.available</code>.
     */
    public final TableField<SysPermissionRecord, Boolean> AVAILABLE = createField("available", org.jooq.impl.SQLDataType.BIT, this, "");

    /**
     * The column <code>album.sys_permission.name</code>.
     */
    public final TableField<SysPermissionRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>album.sys_permission.parent_id</code>.
     */
    public final TableField<SysPermissionRecord, Long> PARENT_ID = createField("parent_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>album.sys_permission.parent_ids</code>.
     */
    public final TableField<SysPermissionRecord, String> PARENT_IDS = createField("parent_ids", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>album.sys_permission.permission</code>.
     */
    public final TableField<SysPermissionRecord, String> PERMISSION = createField("permission", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>album.sys_permission.resource_type</code>.
     */
    public final TableField<SysPermissionRecord, SysPermissionResourceType> RESOURCE_TYPE = createField("resource_type", org.jooq.impl.SQLDataType.VARCHAR(6).asEnumDataType(com.siyuo2o.glass.db.album.enums.SysPermissionResourceType.class), this, "");

    /**
     * The column <code>album.sys_permission.url</code>.
     */
    public final TableField<SysPermissionRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>album.sys_permission</code> table reference
     */
    public SysPermission() {
        this(DSL.name("sys_permission"), null);
    }

    /**
     * Create an aliased <code>album.sys_permission</code> table reference
     */
    public SysPermission(String alias) {
        this(DSL.name(alias), SYS_PERMISSION);
    }

    /**
     * Create an aliased <code>album.sys_permission</code> table reference
     */
    public SysPermission(Name alias) {
        this(alias, SYS_PERMISSION);
    }

    private SysPermission(Name alias, Table<SysPermissionRecord> aliased) {
        this(alias, aliased, null);
    }

    private SysPermission(Name alias, Table<SysPermissionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SysPermission(Table<O> child, ForeignKey<O, SysPermissionRecord> key) {
        super(child, key, SYS_PERMISSION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Album.ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SYS_PERMISSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SysPermissionRecord> getPrimaryKey() {
        return Keys.KEY_SYS_PERMISSION_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SysPermissionRecord>> getKeys() {
        return Arrays.<UniqueKey<SysPermissionRecord>>asList(Keys.KEY_SYS_PERMISSION_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysPermission as(String alias) {
        return new SysPermission(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SysPermission as(Name alias) {
        return new SysPermission(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SysPermission rename(String name) {
        return new SysPermission(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SysPermission rename(Name name) {
        return new SysPermission(name, null);
    }
}
